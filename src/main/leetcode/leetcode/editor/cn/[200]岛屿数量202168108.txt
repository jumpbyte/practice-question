class Solution {


    /**
     * BFS 解法
     * @param grid
     * @return
     */
    public int numIslands(char[][] grid){
        if(grid == null || grid.length == 0){
            return 0;
        }
        Queue<int[]>  queue = new LinkedList<>();
        int rows = grid.length;
        int cols = grid[0].length;
        int count=0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                  //遇到为1的岛屿
                  if(grid[i][j] == '1'){
                      count ++;
                      grid[i][j]='0';
                      //将i,j坐标加入待查找相连岛屿坐标队列中
                      queue.add(new int[]{i,j});
                      while (!queue.isEmpty()){
                           //此循环是以 i,j为基准点 向上下左右方向逐步扩散查找所有相连的为1岛屿，并置为0，防止在下次外层循环出现
                           int[] point  = queue.poll();
                           int x = point[0];
                           int y = point[1];
                           if(x-1>=0 && grid[x-1][y] == '1'){
                               grid[x-1][y]='0';
                               queue.add(new int[]{x-1,y});
                           }
                          if(x+1 < rows && grid[x+1][y] == '1'){
                              grid[x+1][y]='0';
                              queue.add(new int[]{x+1,y});
                          }
                          if(y-1>=0 && grid[x][y-1] == '1'){
                              grid[x][y-1]='0';
                              queue.add(new int[]{x,y-1});
                          }
                          if(y+1 < cols && grid[x][y+1] == '1'){
                              grid[x][y+1]='0';
                              queue.add(new int[]{x,y+1});
                          }
                      }
                  }
            }
        }
        return count;
    }

    /**
     * DFS 解法
     * @param grid
     * @return
     */
    public int numIslands1(char[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        int result = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == '1') {
                    result++;
                    dfs(grid,i,j,rows,cols);
                }
            }
        }
        return result;
    }

    private void dfs(char[][] grid,int x, int y,int rows,int cols){
        if(x<0 || y<0  || x>= rows || y>= cols || grid[x][y] =='0'){
            return;
        }
        grid[x][y] = '0';
        dfs(grid,x+1,y,rows,cols);
        dfs(grid,x-1,y,rows,cols);
        dfs(grid,x,y+1,rows,cols);
        dfs(grid,x,y-1,rows,cols);
    }


}

//runtime:6 ms
//memory:40.8 MB
