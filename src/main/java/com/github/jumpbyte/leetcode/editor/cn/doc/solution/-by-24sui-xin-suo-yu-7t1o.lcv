### 解题思路

1. **递归**：需要注意边界条件和进位情况，需要进位时单独 `new ListNode(1);` 即可。
2. **迭代**：进位 `carry ！= 0` 可以放入 `while` 循环条件中简化代码。另外，在 `carry` 进位过程中可以省去 `sum` 的逻辑。

### 代码实现

#### 递归

* java

```java
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null) return l2;
        if(l2 == null) return l1;
        int sum = l1.val + l2.val;
        ListNode head = new ListNode(sum % 10);
        head.next = addTwoNumbers(l1.next, l2.next);
        if(sum > 9) head.next = addTwoNumbers(head.next, new ListNode(1));
        return head;
    }
}
```

#### 迭代

* java

```java
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        int carry = 0;
        while(l1 != null || l2 != null || carry != 0) {
            if(l1 != null) {
                carry += l1.val;
                l1 = l1.next;
            }
            if(l2 != null) {
                carry += l2.val;
                l2 = l2.next;
            }
            curr.next = new ListNode(carry % 10);
            curr = curr.next;
            carry /= 10;
        }
        return dummy.next;
     }
}
```

